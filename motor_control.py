import RPi.GPIO as GPIO
import time
import logging
from gpio_manager import GPIOManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("motor_control.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MotorController:
    def __init__(self):
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–æ–≤
        self.FRONT_IN1 = 17
        self.FRONT_IN2 = 27
        self.FRONT_IN3 = 22
        self.FRONT_IN4 = 25
        self.ENA_FRONT = 20
        self.ENB_FRONT = 21
 
        self.BACK_IN1 = 16
        self.BACK_IN2 = 5
        self.BACK_IN3 = 6
        self.BACK_IN4 = 26
        self.ENA_BACK = 4
        self.ENB_BACK = 3

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO
        self._setup_pins()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –®–ò–ú
        self._init_pwm()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.MIN_SPEED = 26
        self.MAX_SPEED = 30  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        self._current_speed = self.MIN_SPEED  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å

    # –ì–µ—Ç—Ç–µ—Ä
    @property
    def current_speed(self):
        return self._current_speed
    
    # –°–µ—Ç—Ç–µ—Ä
    @current_speed.setter
    def current_speed(self, value):
        value = max(self.MIN_SPEED, min(self.MAX_SPEED, value))
        self._current_speed = value

    def _setup_pins(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ GPIO –ø–∏–Ω—ã –∫–∞–∫ OUTPUT"""
        GPIO.setmode(GPIO.BCM)
        try:
            pins = [self.FRONT_IN1, self.FRONT_IN2, self.FRONT_IN3, self.FRONT_IN4, self.ENA_FRONT, self.ENB_FRONT,
                    self.BACK_IN1, self.BACK_IN2, self.BACK_IN3, self.BACK_IN4, self.ENA_BACK, self.ENB_BACK]
            for pin in pins:
                #logger.info(f"–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–∏–Ω {pin} –∫–∞–∫ OUTPUT")
                GPIO.setup(pin, GPIO.OUT)
                GPIO.output(pin, GPIO.LOW)
            logger.info("GPIO —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPIO: {e}")
            raise

    def _init_pwm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –®–ò–ú-–∫–∞–Ω–∞–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            self.pwm_front_A = GPIO.PWM(self.ENA_FRONT, 500)
            self.pwm_front_B = GPIO.PWM(self.ENB_FRONT, 500)
            self.pwm_back_A = GPIO.PWM(self.ENA_BACK, 500)
            self.pwm_back_B = GPIO.PWM(self.ENB_BACK, 500)

            # –Ø–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å 0% –º–æ—â–Ω–æ—Å—Ç–∏
            self.pwm_front_A.start(0)
            self.pwm_front_B.start(0)
            self.pwm_back_A.start(0)
            self.pwm_back_B.start(0)
            logger.info("–®–ò–ú —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –®–ò–ú: {e}")
            raise  

    def set_speed(self, speed):
        if self.current_speed is None:
            self.current_speed = 0
        """–ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç float"""
        speed = int(round(max(0, min(self.MAX_SPEED, speed)))) 

        if speed == self.current_speed:
            return

        step = 1 if speed > self.current_speed else -1

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è range()
        start = int(round(self.current_speed))
        end = int(round(speed))
        
        for s in range(start, end, step):
            self.pwm_front_A.ChangeDutyCycle(s)
            self.pwm_front_B.ChangeDutyCycle(s)
            self.pwm_back_A.ChangeDutyCycle(s)
            self.pwm_back_B.ChangeDutyCycle(s)
            time.sleep(0.02)  # 20ms –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
        
        self.current_speed = speed
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}%")

    def move_forward(self, speed=None):
        """–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è current_speed, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not hasattr(self, 'pwm_front_A'):
            self._init_pwm()  # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        if speed is not None:
            self.set_speed(speed)

        # –ü–µ—Ä–µ–¥–Ω–∏–µ –º–æ—Ç–æ—Ä—ã
        GPIO.output(self.FRONT_IN1, GPIO.HIGH)
        GPIO.output(self.FRONT_IN2, GPIO.LOW)
        GPIO.output(self.FRONT_IN3, GPIO.HIGH)
        GPIO.output(self.FRONT_IN4, GPIO.LOW)

        # –ó–∞–¥–Ω–∏–µ –º–æ—Ç–æ—Ä—ã
        GPIO.output(self.BACK_IN1, GPIO.HIGH)
        GPIO.output(self.BACK_IN2, GPIO.LOW)
        GPIO.output(self.BACK_IN3, GPIO.HIGH)
        GPIO.output(self.BACK_IN4, GPIO.LOW)

        logger.info("–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥")
        #print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–æ–≤: IN1={GPIO.input(self.FRONT_IN1)}, IN2={GPIO.input(self.FRONT_IN2)}")
        
    def calibrate_min_speed(self):
        print("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Ç–æ—Ä—ã –≤ —Ä–µ–∂–∏–º "–≤–ø–µ—Ä—ë–¥"
        GPIO.output(self.FRONT_IN1, GPIO.HIGH)
        GPIO.output(self.FRONT_IN2, GPIO.LOW)
        GPIO.output(self.FRONT_IN3, GPIO.HIGH)
        GPIO.output(self.FRONT_IN4, GPIO.LOW)
        GPIO.output(self.BACK_IN1, GPIO.HIGH)
        GPIO.output(self.BACK_IN2, GPIO.LOW)
        GPIO.output(self.BACK_IN3, GPIO.HIGH)
        GPIO.output(self.BACK_IN4, GPIO.LOW)

        for speed in range(0, 101):
            self.pwm_front_A.ChangeDutyCycle(speed)
            self.pwm_front_B.ChangeDutyCycle(speed)
            self.pwm_back_A.ChangeDutyCycle(speed)
            self.pwm_back_B.ChangeDutyCycle(speed)
            print(f"–ü—Ä–æ–±—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}%", end='\r')
            time.sleep(0.1)
            
            if input("–ú–æ—Ç–æ—Ä –Ω–∞—á–∞–ª –≤—Ä–∞—â–∞—Ç—å—Å—è? [y/n]: ").lower() == 'y':
                self.MIN_SPEED = speed + 5  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 5%
                print(f"\nüéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {self.MIN_SPEED}%")
                self.set_speed(0)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Ç–æ—Ä
                return
        print("–ú–æ—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")

    def move_backward(self):
        
        logger.info("–î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
        # –ü–µ—Ä–µ–¥–Ω–∏–µ –º–æ—Ç–æ—Ä—ã
        GPIO.output(self.FRONT_IN1, GPIO.LOW)
        GPIO.output(self.FRONT_IN2, GPIO.HIGH)
        GPIO.output(self.FRONT_IN3, GPIO.LOW)
        GPIO.output(self.FRONT_IN4, GPIO.HIGH)
        # –ó–∞–¥–Ω–∏–µ –º–æ—Ç–æ—Ä—ã
        GPIO.output(self.BACK_IN1, GPIO.LOW)
        GPIO.output(self.BACK_IN2, GPIO.HIGH)
        GPIO.output(self.BACK_IN3, GPIO.LOW)
        GPIO.output(self.BACK_IN4, GPIO.HIGH)
    
    def turn_left(self):
        
        logger.info("–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ")
        # –ª–µ–≤–æ–µ –∫–æ–ª–µ—Å–æ - –Ω–∞–∑–∞–¥
        GPIO.output(self.FRONT_IN1, GPIO.LOW)
        GPIO.output(self.FRONT_IN2, GPIO.HIGH)
        GPIO.output(self.BACK_IN1, GPIO.HIGH)
        GPIO.output(self.BACK_IN2, GPIO.LOW)
        # –ø—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ - –≤–ø–µ—Ä–µ–¥
        GPIO.output(self.FRONT_IN3, GPIO.HIGH)
        GPIO.output(self.FRONT_IN4, GPIO.LOW)
        GPIO.output(self.BACK_IN3, GPIO.LOW)
        GPIO.output(self.BACK_IN4, GPIO.HIGH)
    
    def turn_right(self):
        
        logger.info("–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ")
        # –ª–µ–≤–æ–µ –∫–æ–ª–µ—Å–æ - –≤–ø–µ—Ä–µ–¥
        GPIO.output(self.FRONT_IN1, GPIO.HIGH)
        GPIO.output(self.FRONT_IN2, GPIO.LOW)
        GPIO.output(self.BACK_IN1, GPIO.LOW)
        GPIO.output(self.BACK_IN2, GPIO.HIGH)
        # –ø—Ä–∞–≤–æ–µ –∫–æ–ª–µ—Å–æ - –Ω–∞–∑–∞–¥
        GPIO.output(self.FRONT_IN3, GPIO.LOW)
        GPIO.output(self.FRONT_IN4, GPIO.HIGH)
        GPIO.output(self.BACK_IN3, GPIO.HIGH)
        GPIO.output(self.BACK_IN4, GPIO.LOW)
    
    def stop(self):
        self.set_speed(0)
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞")
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤
        GPIO.output(self.FRONT_IN1, GPIO.LOW)
        GPIO.output(self.FRONT_IN2, GPIO.LOW)
        GPIO.output(self.FRONT_IN3, GPIO.LOW)
        GPIO.output(self.FRONT_IN4, GPIO.LOW)
        GPIO.output(self.BACK_IN1, GPIO.LOW)
        GPIO.output(self.BACK_IN2, GPIO.LOW)
        GPIO.output(self.BACK_IN3, GPIO.LOW)
        GPIO.output(self.BACK_IN4, GPIO.LOW)
    
    def emerg_stop(self, reverse_time=0.3):
        logger.info("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–æ–¥–æ–º
        GPIO.output(self.FRONT_IN1, GPIO.LOW)
        GPIO.output(self.FRONT_IN2, GPIO.HIGH)
        GPIO.output(self.FRONT_IN3, GPIO.LOW)
        GPIO.output(self.FRONT_IN4, GPIO.HIGH)
        GPIO.output(self.BACK_IN1, GPIO.LOW)
        GPIO.output(self.BACK_IN2, GPIO.HIGH)
        GPIO.output(self.BACK_IN3, GPIO.LOW)
        GPIO.output(self.BACK_IN4, GPIO.HIGH)

        if reverse_time > 0:
            time.sleep(reverse_time)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞

        # –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        self.set_speed(0)
        GPIO.output(self.FRONT_IN1, GPIO.LOW)
        GPIO.output(self.FRONT_IN2, GPIO.LOW)
        GPIO.output(self.FRONT_IN3, GPIO.LOW)
        GPIO.output(self.FRONT_IN4, GPIO.LOW)
        GPIO.output(self.BACK_IN1, GPIO.LOW)
        GPIO.output(self.BACK_IN2, GPIO.LOW)
        GPIO.output(self.BACK_IN3, GPIO.LOW)
        GPIO.output(self.BACK_IN4, GPIO.LOW)

    def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self.stop()
        self.pwm.stop()
        GPIO.cleanup()

