import cv2
import time
import threading
import logging
import signal
import sys
import os
import subprocess
import traceback
import asyncio
from typing import Optional
import gc
from camera_manager import CameraManager
from motor_control import MotorController
from distance_sensor import DistanceSensor
from navigation import NavigationSystem
from navigation import ObstacleDetector
from object_detector import ObjectDetector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/detect_dog.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RobotSystem:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.camera = CameraManager()
        self.motor = MotorController()
        self.sensor = DistanceSensor()
        self.detector = ObjectDetector()
        self._stop_event = threading.Event()
        self.dog_detected_event = threading.Event()
        self._lock = threading.Lock()
        self.nav = NavigationSystem(self.motor, self.sensor)
        self.loop = asyncio.new_event_loop()
        self.detect_obst = ObstacleDetector(self.sensor, self.motor)
        self._last_detection = time.time()
                
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.running = False
        self.game_script_running = False
        self._game_process: Optional[subprocess.Popen] = None
        
        # –ü–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.threads = []

        # –ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = threading.Thread(
            target=self._run_loop, 
            daemon=True,
            name="EventLoopThread"
        )
        self.thread.start()

    def _run_loop(self):
        """–ó–∞–ø—É—Å–∫ event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()

    def moving(self):
        """–ü–æ—Ç–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ–±—ä–µ–∑–¥–∞"""
        try:
            while not self._stop_event.is_set():
                distance = self.sensor.get_distance()
                logger.info(f"–¢–µ–∫—É—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {distance:.2f} —Å–º")
                if distance is not None:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                    future = asyncio.run_coroutine_threadsafe(
                        self.nav.monitor_distance(),
                        self.loop
                    )
                    try:
                        future.result(timeout=0.1)  # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    except asyncio.TimeoutError:
                        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                time.sleep(0.1)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ–±—ä–µ–∑–¥–∞: {e}")        

    def detect_objects(self):
        """–ü–æ—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")
        while not self._stop_event.is_set():
            try:
                #logger.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–∞–¥—Ä..")
                frame = self.camera.get_frame()
                if frame is None:
                    logger.info("–ù–µ—Ç –∫–∞–¥—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é")
                    continue

                if frame is not None:
                    detections = self.detector.detect_objects(frame, target_label='dog')

                    if detections:
                        cv2.imshow("dog", frame)
                        self.dog_detected_event.set()
                        break

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {e}")
                break

    def detect_obstacles(self):
        """–ü–æ—Ç–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É")
        while not self._stop_event.is_set():
            try:
                frame = self.camera.get_frame()
                if frame is None:
                    continue
                if frame is not None:
                    #cv2.imshow("detect_obstacles", frame)
                    self.detect_obst.process_frame(frame)
                else:
                    logger.info("–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–¥—Ä–æ–≤ (–æ–∂–∏–¥–∞–Ω–∏–µ...)")
                time.sleep(0.05)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É: {e}")
                break

    def handle_dog_detection(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–æ–±–∞–∫–∏"""
        try:
            self.game_script_running = True

            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.stop()
            time.sleep(2)
            gc.collect()

            # –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —Å –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
            logger.info("–°–æ–±–∞–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞! –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã.")
            subprocess.Popen(
                [sys.executable, "play_with_dog.py"],
                start_new_session=True
            )
            
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
            logging.info("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç")
            os._exit(0)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.running = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        #self.threads = [
        #    threading.Thread(target=self.detect_obstacles)
        #]
        #
        ## –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        #for thread in self.threads:
        #    thread.start()
        
        # –°—Ç–∞—Ä—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        self.motor.move_forward(30)
        logger.info("–†–æ–±–æ—Ç –Ω–∞—á–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ")
        robot.moving()

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        detection_thread = threading.Thread(
            target=self.detect_objects,
            name="DetectionThread"
        )
        detection_thread.start()

        # –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while not self._stop_event.is_set():
            if self.dog_detected_event.wait(timeout=0.5):
                self.handle_dog_detection()  # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ!
                break

        detection_thread.join(timeout=1)
        logger.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        with self._lock:
            if self._stop_event.is_set():
                return

            self._stop_event.set()
            self.running = False
            logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤
            self.motor.emerg_stop()
            self.camera.stop()
            self.loop.call_soon_threadsafe(self.loop.stop)
            if self.loop.is_running():
                self.loop.call_soon_threadsafe(self.loop.stop)
        
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
            #for thread in self.threads:
            #    if thread is not threading.current_thread():
            #        thread.join(timeout=1)
            #    if thread.is_alive():
            #        logger.warning(f"‚ùå –ü–æ—Ç–æ–∫ {thread.name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!")
            #dump_threads()

            logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            #sys.exit(0)  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥

def stop_all(signum=None, frame=None):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–≤–∏–∂–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    robot.stop()  # –í—ã–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–æ–±–æ—Ç–∞

    sys.exit(0 if signum == signal.SIGINT else 1)

def signal_handler(signum, frame):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if not hasattr(signal_handler, 'called'):  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        signal_handler.called = True
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É —Ä–æ–±–æ—Ç–∞
        global robot
        if 'robot' in globals():
            robot.stop()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
        sys.exit(1)

def dump_threads():
    logger.info("üìç Dump –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤:")
    for thread_id, frame in sys._current_frames().items():
        logger.info(f"üîπ –ü–æ—Ç–æ–∫ {thread_id}:")
        for filename, lineno, name, line in traceback.extract_stack(frame):
            logger.info(f"  File {filename}, line {lineno}, in {name}")
            if line:
                logger.info(f"    {line.strip()}")

if __name__ == "__main__":
    robot = RobotSystem()
        
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, lambda s, f: signal_handler(s, f))
    signal.signal(signal.SIGTERM, lambda s, f: signal_handler(s, f))
        
    try:
        loop = asyncio.new_event_loop()
        threading.Thread(target=loop.run_forever, daemon=True).start()

        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        robot.start()
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        while True:
            time.sleep(1)
            robot.game_script_running = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
            
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        stop_all()
    except KeyboardInterrupt:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        stop_all()

    finally:
        robot.stop()
        stop_all()